import datetime
import sqlite3
import time

from aiogram import Router
from aiogram.types import Message, FSInputFile
from data.utils import is_subscribed, is_active, draw_card
from apscheduler.schedulers.asyncio import AsyncIOScheduler

from aiogram import F

from handlers import callbacks
from data import utils
from keyboards.general import channel_ikb, mini_games_ikb, collection_ikb, transfer_ikb, market_ikb

router = Router()
scheduler = AsyncIOScheduler()
card_counter = 0


@router.message(F.text == "üÉè –ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç—É")
async def get_card(message: Message):
    if await is_subscribed(message.from_user.id) and is_active(message.from_user.id):
        conn = sqlite3.connect('database.db')
        cursor = conn.cursor()
        data = cursor.execute(f"SELECT card_time, chances FROM users WHERE id='{message.from_user.id}'").fetchone()
        click_date, chances = data[0], data[1]
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –Ω–∞–∂–∞—Ç–∏—è
        if click_date != '':
            t = (list(map(int, click_date.split()[0].split("-"))), list(map(int, click_date.split()[1].split("."))))
            click_date = datetime.datetime(t[0][0], t[0][1], t[0][2], t[1][0], t[1][1], t[1][2])
        today = datetime.datetime.today()

        # –ï—Å–ª–∏ –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è –±–æ–ª—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ
        if click_date == '' or today - datetime.timedelta(hours=6) > click_date or chances > 0:
            if chances == 0:
                cursor.execute(
                    f"UPDATE users SET card_time = '{today.strftime('%Y-%m-%d %H.%M.%S')}' WHERE id='{message.from_user.id}'")
                conn.commit()
            else:
                cursor.execute(
                    f"UPDATE users SET chances = chances - 1 WHERE id='{message.from_user.id}'")
                conn.commit()
            card_for_user = cursor.execute("SELECT * FROM cards WHERE amount > 0 ORDER BY RANDOM() LIMIT 1").fetchall()[0]

            # –ï—Å–ª–∏ –æ—Å—Ç–∞–ª–∏—Å—å –∫–∞—Ä—Ç—ã
            if len(card_for_user) == 6:
                cursor.execute(f"UPDATE cards SET amount = amount - 1 WHERE id='{card_for_user[0]}'")
                conn.commit()
                cursor.execute(f"INSERT INTO collections (user_id, card_id) VALUES ('{message.from_user.id}', '{card_for_user[0]}')")
                conn.commit()
                cursor.execute(f"UPDATE users SET full_score = full_score + {int(card_for_user[5])}, season_score = season_score + {int(card_for_user[5])} WHERE id='{message.from_user.id}'")
                conn.commit()
                score = cursor.execute(f"SELECT season_score FROM users WHERE id='{message.from_user.id}'").fetchone()[0]
                cursor.close()
                text = (f"<b>üí• –¢—ã –ø–æ–ª—É—á–∞–µ—à—å –Ω–æ–≤—É—é –∫–∞—Ä—Ç—É!</b>\n\n\nüî§ –ù–∏–∫–Ω–µ–π–º: <b>{card_for_user[1]}</b>\n\nüïπ –ö–æ–º–∞–Ω–¥–∞: "
                        f"<b>{card_for_user[2]}</b>\n\nüéñ –ó–≤–∞–Ω–∏–µ: <b>{card_for_user[3]}</b>\n\nüî¢ –û—á–∫–∏: <b>{card_for_user[5]}</b>\n\nüßÆ –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—á–∫–æ–≤: <b>{score}</b>")

                photo = FSInputFile(path=f"./cards/{card_for_user[0]}.jpg")
                await message.answer_photo(photo, caption=text, parse_mode="HTML")
            else:
                await message.answer("–°–µ–π—á–∞—Å –º—ã –Ω–µ –º–æ–∂–µ–º –≤—ã–¥–∞—Ç—å —Ç–µ–±–µ –∫–∞—Ä—Ç—É –∏–∑-–∑–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–æ–π –æ—à–∏–±–∫–∏üôÖ‚Äç‚ôÇÔ∏è. –ú—ã –≤ –∫—É—Ä—Å–µ –ø—Ä–æ–±–ª–µ–º—ã –∏ —É–∂–µ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –µ–µ üóø, —á—Ç–æ–±—ã –∫–∞–∫ –º–æ–∂–Ω–æ –±—ã—Å—Ç—Ä–µ–µ –≤—ã–¥–∞—Ç—å —Ç–µ–±–µ –∫–∞—Ä—Ç—É!")
                cursor.close()

        else:
            remains = str(datetime.timedelta(hours=6) - (today - click_date)).split(":")
            await message.answer(f"‚è≥ –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ –ø—Ä–æ—à–ª–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ—Ç–∫—Ä—ã—Ç–∏—è. –ü—Ä–∏—Ö–æ–¥–∏ –∏ –ø–æ–ª—É—á–∞–π –Ω–æ–≤—É—é –∫–∞—Ä—Ç—É —á–µ—Ä–µ–∑ <b>{remains[0]} —á : {remains[1]} –º–∏–Ω</b>!", parse_mode="HTML")
            cursor.close()
    else:
        await message.delete()
        await message.answer('<b>–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∏–≥—Ä—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª</b>‚úÖ',
                             reply_markup=channel_ikb, parse_mode="HTML")


@router.message(F.text == "üóÇ –ú–æ—è –∫–æ–ª–ª–µ–∫—Ü–∏—è")
async def get_card(message: Message):
    if await is_subscribed(message.from_user.id) and is_active(message.from_user.id):
        await message.answer("üóÉ –ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ—é –∫–æ–ª–ª–µ–∫—Ü–∏—é –∫–∞—Ä—Ç. –í–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è —É–¥–æ–±–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —ç—Ç–æ–º—É —Ä–∞–∑–¥–µ–ª—É.")

        conn = sqlite3.connect('database.db')
        cursor = conn.cursor()
        cursor.execute(f"UPDATE indexes SET card_index=0 WHERE user_id='{message.from_user.id}'")
        conn.commit()
        try:
            user_card_id = cursor.execute(f"SELECT card_id FROM collections WHERE user_id='{message.from_user.id}'").fetchall()[::-1][0][0]
            length = cursor.execute(f"SELECT COUNT(card_id) FROM collections WHERE user_id='{message.from_user.id}'").fetchone()[0]
            card_info = cursor.execute(f"SELECT id, player, team, rank, score FROM cards WHERE id='{user_card_id}'").fetchone()
            cursor.close()
            if len(card_info) == 5:
                card = utils.Card(card_info)
                await draw_card(typ="base", tek=1, all=length, card=card, message=message)
            else:
                await message.answer("–ö–∞–∂–µ—Ç—Å—è, –≤ —Ç–≤–æ–µ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –Ω–µ—Ç –∫–∞—Ä—Ç ‚ùå")
        except IndexError:
            await message.answer("–ö–∞–∂–µ—Ç—Å—è, –≤ —Ç–≤–æ–µ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –Ω–µ—Ç –∫–∞—Ä—Ç ‚ùå")



    else:
        await message.delete()
        await message.answer('<b>–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∏–≥—Ä—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª</b>‚úÖ',
                             reply_markup=channel_ikb, parse_mode="HTML")


@router.message(F.text == "‚ÜîÔ∏è –û–±–º–µ–Ω")
async def get_card(message: Message):
    if await is_subscribed(message.from_user.id) and is_active(message.from_user.id):
        await message.answer(f"üîÑ <b>–¢–≤–æ–π ID: <code>{message.from_user.id}</code></b>. –ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å —Å–æ–∑–¥–∞–≤–∞—Ç—å –∏ —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–≤–æ–∏–º–∏ –æ–±–º–µ–Ω–∞–º–∏, –∞ —Ç–∞–∫–∂–µ —Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é —É—Å–ø–µ—à–Ω—ã—Ö –æ–±–º–µ–Ω–æ–≤. –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ:", reply_markup=transfer_ikb, parse_mode="HTML")
    else:
        await message.delete()
        await message.answer('<b>–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∏–≥—Ä—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª</b>‚úÖ',
                             reply_markup=channel_ikb, parse_mode="HTML")


@router.message(F.text == "üé∞ –ú–∏–Ω–∏-–∏–≥—Ä—ã")
async def get_card(message: Message):
    if await is_subscribed(message.from_user.id) and is_active(message.from_user.id):
        await message.answer("üèì –ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å —Å—ã–≥—Ä–∞—Ç—å –≤ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –º–∏–Ω–∏-–∏–≥—Ä—ã, –≤ —Å–ª—É—á–∞–µ –ø–æ–±–µ–¥—ã —Ç—ã –ø–æ–ª—É—á–∏—à—å —Ü–µ–Ω–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã. –í—ã–±–µ—Ä–∏ –º–∏–Ω–∏-–∏–≥—Ä—É –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ:", reply_markup=mini_games_ikb)
    else:
        await message.delete()
        await message.answer('<b>–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∏–≥—Ä—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª</b>‚úÖ',
                             reply_markup=channel_ikb, parse_mode="HTML")


@router.message(F.text == "üõí –ú–∞–≥–∞–∑–∏–Ω")
async def get_card(message: Message):
    if await is_subscribed(message.from_user.id) and is_active(message.from_user.id):
        conn = sqlite3.connect('./database.db')
        cursor = conn.cursor()
        credits = cursor.execute(f"SELECT credits FROM users WHERE id='{message.from_user.id}'").fetchone()[0]
        cursor.close()
        await message.answer(f"üí∏ –ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –≤–Ω—É—Ç—Ä–∏–∏–≥—Ä–æ–≤—É—é –≤–∞–ª—é—Ç—É –∏ –æ–±–º–µ–Ω—è—Ç—å –µ–µ –Ω–∞ –ø–æ–ø—ã—Ç–∫–∏ –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–∞—Ä—Ç –∏–ª–∏ —É—á–∞—Å—Ç–∏—è –≤ –º–∏–Ω–∏-–∏–≥—Ä–∞—Ö.\n\n–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: <b>{credits}</b> üî´\n\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ: ", reply_markup=market_ikb, parse_mode="HTML")
    else:
        await message.delete()
        await message.answer('<b>–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∏–≥—Ä—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª</b>‚úÖ',
                             reply_markup=channel_ikb, parse_mode="HTML")
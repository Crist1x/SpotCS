from idlelib.pyparse import trans

from aiogram import types
import sqlite3

from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, FSInputFile, InlineKeyboardMarkup, InlineKeyboardButton, \
    InputMediaPhoto
from aiogram.fsm.context import FSMContext
from pyexpat.errors import messages

from config import CHANNEL_ID, menu_text
from data import utils
from data.forms import Quiz, GetAnswer, Search, Team, TransferID
from data.utils import draw_card, sort_by_rank
from dispatcher import bot
import datetime

import time

from handlers.admin_actions import add_card
from keyboards.admin import cansel_kb, admin_menu_kb
from keyboards.general import channel_ikb, main_menu_kb, ranks_ikb, ranks_ikb_trans


# –í—Ö–æ–¥ –≤ –∏–≥—Ä—É
async def in_game(callback: types.CallbackQuery):
    user_channel_status = await bot.get_chat_member(chat_id=CHANNEL_ID, user_id=callback.from_user.id)

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–ø–∏—Å–∞–Ω
    if user_channel_status.status != 'left':
        conn = sqlite3.connect('database.db')
        cursor = conn.cursor()
        is_exist = cursor.execute(f"SELECT id FROM users WHERE id={callback.from_user.id}").fetchone()
        if not is_exist:
            cursor.execute(f"INSERT INTO users (id, card_time, random_time, luckyshot_time, clutch_time, quiz_done, season_score, "
                           f"full_score, chances, status) VALUES ('{callback.from_user.id}', '', '', '', '', '', '', '', 6, 'active');")
            cursor.execute(f"INSERT INTO indexes (user_id)"
                           f" VALUES ('{callback.from_user.id}');")
        conn.commit()
        cursor.close()
        await callback.message.delete()
        await callback.message.answer(menu_text, reply_markup=main_menu_kb)

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–æ–ª—å—à–µ –Ω–µ –≤ –∫–∞–Ω–∞–ª–µ
    else:
        await callback.message.delete()
        await callback.message.answer('<b>–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∏–≥—Ä—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª</b>‚úÖ', reply_markup=channel_ikb, parse_mode="HTML")

# –ò–≥—Ä–∞ –≤ –∫—É–±–∏–∫
async def random(callback: types.CallbackQuery):
    conn = sqlite3.connect('database.db')
    cursor = conn.cursor()
    click_date = cursor.execute(f"SELECT random_time FROM users WHERE id='{callback.from_user.id}'").fetchone()[0]
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –Ω–∞–∂–∞—Ç–∏—è
    if click_date != '':
        t = (list(map(int, click_date.split()[0].split("-"))), list(map(int, click_date.split()[1].split("."))))
        click_date = datetime.datetime(t[0][0], t[0][1], t[0][2], t[1][0], t[1][1], t[1][2])
    today = datetime.datetime.today()

    # –ï—Å–ª–∏ –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è –±–æ–ª—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ
    if click_date == '' or today - datetime.timedelta(5) > click_date:
        cursor.execute(f"UPDATE users SET random_time = '{today.strftime('%Y-%m-%d %H.%M.%S')}' WHERE id='{callback.from_user.id}'")
        conn.commit()
        data = await bot.send_dice(callback.message.chat.id, emoji='üé≤')
        time.sleep(4)
        form = "–ø–æ–ø—ã—Ç–∫–∏"
        match data.dice.value:
            case 1:
                form = "–ø–æ–ø—ã—Ç–∫—É"
            case 5:
                form = "–ø–æ–ø—ã—Ç–æ–∫"

        await callback.message.answer(f"–¢—ã –ø–æ–ª—É—á–∞–µ—à—å {data.dice.value} {form} üéâ!!!")

        chances = cursor.execute(f"SELECT chances FROM users WHERE id='{callback.from_user.id}'").fetchone()[0]
        cursor.execute(f"UPDATE users SET chances='{chances + data.dice.value}' WHERE id={callback.from_user.id}")
        conn.commit()
        cursor.close()
    else:
        remains = str(datetime.timedelta(5) - (today - click_date)).split(", ")
        days, timee = remains[0].split()[0], remains[1].split(":")
        await callback.message.answer(f"‚è≥ –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ –ø—Ä–æ—à–ª–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏! –¢—ã —Å–º–æ–∂–µ—à—å —Å–Ω–æ–≤–∞ —Å—ã–≥—Ä–∞—Ç—å –≤ –∏–≥—Ä—É —á–µ—Ä–µ–∑ {days} –¥–Ω. {timee[0]} —á. {timee[1]} –º–∏–Ω.")
        cursor.close()

# –ó–∞–±—Ä–æ—Å –≤ –∫–æ–ª—å—Ü–æ
async def lucky_shot(callback: types.CallbackQuery):
    conn = sqlite3.connect('database.db')
    cursor = conn.cursor()
    click_date = cursor.execute(f"SELECT luckyshot_time FROM users WHERE id='{callback.from_user.id}'").fetchone()[0]

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –Ω–∞–∂–∞—Ç–∏—è
    if click_date != '':
        t = (list(map(int, click_date.split()[0].split("-"))), list(map(int, click_date.split()[1].split("."))))
        click_date = datetime.datetime(t[0][0], t[0][1], t[0][2], t[1][0], t[1][1], t[1][2])
    today = datetime.datetime.today()

    # –ï—Å–ª–∏ –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è –±–æ–ª—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ
    if click_date == '' or today - datetime.timedelta(1) > click_date:
        cursor.execute(f"UPDATE users SET luckyshot_time = '{today.strftime('%Y-%m-%d %H.%M.%S')}' WHERE id='{callback.from_user.id}'")
        conn.commit()
        data = await bot.send_dice(callback.message.chat.id, emoji='üèÄ')
        time.sleep(4.5)
        if data.dice.value < 4:
            await callback.message.answer(f'üö´ –¢—ã –ø—Ä–æ–º–∞—Ö–Ω—É–ª—Å—è, –ø—Ä–∏—Ö–æ–¥–∏ –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑.')
        else:
            await callback.message.answer(f'üí• –ï—Å—Ç—å –ø–æ–ø–∞–¥–∞–Ω–∏–µ! –¢—ã –ø–æ–ª—É—á–∞–µ—à—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –ø–æ–ø—ã—Ç–∫—É.')
            chances = cursor.execute(f"SELECT chances FROM users WHERE id='{callback.from_user.id}'").fetchone()[0]
            cursor.execute(f"UPDATE users SET chances='{chances + 1}' WHERE id={callback.from_user.id}")
            conn.commit()
            cursor.close()
    else:
        remains = str(datetime.timedelta(1) - (today - click_date)).split(":")
        await callback.message.answer(f"‚è≥ –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ –ø—Ä–æ—à–ª–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏! –¢—ã —Å–º–æ–∂–µ—à—å —Å–Ω–æ–≤–∞ —Å—ã–≥—Ä–∞—Ç—å –≤ –∏–≥—Ä—É —á–µ—Ä–µ–∑ {remains[0]} —á. {remains[1]} –º–∏–Ω.")
        cursor.close()

# –ö–≤–∏–∑
async def quiz(callback: types.CallbackQuery, state: FSMContext):
    conn = sqlite3.connect('database.db')
    cursor = conn.cursor()
    quiz_status = cursor.execute(f"SELECT quiz_done FROM users WHERE id={callback.from_user.id}").fetchone()[0]
    if quiz_status != "done":
        if cursor.execute("select count(*) from quiz").fetchone()[0] != 0:
            question, answers = cursor.execute(f"SELECT question FROM quiz").fetchone()[0], cursor.execute(f"SELECT variant_a, variant_b, variant_c, variant_d FROM quiz").fetchone()
            kb = ReplyKeyboardMarkup(keyboard=[
                                [KeyboardButton(text=f"{answers[0]}"), KeyboardButton(text=f"{answers[1]}")],
                                [KeyboardButton(text=f"{answers[2]}"), KeyboardButton(text=f"{answers[3]}")],
                                [KeyboardButton(text="–í –º–µ–Ω—é")]], resize_keyboard=True)

            await callback.message.answer(f"<b>{question.capitalize()}</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞:", reply_markup=kb, parse_mode="HTML")
            await state.set_state(GetAnswer.ANSWER)
            cursor.close()

        else:
            await callback.message.answer("–°–∫–æ—Ä–æ –º—ã –¥–æ–±–∞–≤–∏–º –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å")
            cursor.close()
    else:
        await callback.message.answer("–í—ã —É–∂–µ –æ—Ç–≤–µ—á–∞–ª–∏ –Ω–∞ –∫–≤–∏–∑. –°–∫–æ—Ä–æ –º—ã –¥–æ–±–∞–≤–∏–º –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å")
        cursor.close()


# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã—Ö–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è –∫–≤–∏–∑–∞
async def confirm_quiz(callback: types.CallbackQuery, state: FSMContext):
    conn = sqlite3.connect('database.db')
    cursor = conn.cursor()
    data = await state.get_data()

    cursor.execute("DELETE FROM quiz")
    cursor.execute("UPDATE users SET quiz_done=NULL")
    conn.commit()
    cursor.execute("INSERT INTO quiz (question, variant_a, variant_b, variant_c, variant_d, correct) VALUES "
                   f"('{data['question']}', '{data['first']}', '{data['second']}', '{data['third']}', '{data['fourth']}', '{int(data['correct'])}')")
    conn.commit()
    cursor.close()
    await state.clear()
    await callback.message.answer("–ö–≤–∏–∑ –æ–±–Ω–æ–≤–ª–µ–Ω!", reply_markup=admin_menu_kb)


# –ù–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã—Ö–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –≤–æ–ø–æ—Å–∞ –¥–ª—è –∫–≤–∏–∑–∞
async def disclaim_quiz(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer("–ü–æ—Ä–æ–±—É–µ–º –∑–∞–Ω–æ–≤–æ. –í–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–º –∫–≤–∏–∑–µ:", reply_markup=cansel_kb)
    await state.set_state(Quiz.QUESTION)

async def next_card(callback: types.CallbackQuery):
    #TODO: –ø–æ–º–µ–Ω—è—Ç—å —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—é –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –∫–∞—Ä–¥
    if callback.data.split("_")[-1] == "card" or callback.data.split("_")[-1] == "trans":
        conn = sqlite3.connect('database.db')
        cursor = conn.cursor()
        user_card_ids = [i[0] for i in cursor.execute(f"SELECT card_id FROM collections WHERE user_id='{callback.from_user.id}'").fetchall()[::-1]]
        card_index = cursor.execute(f"SELECT card_index FROM indexes WHERE user_id='{callback.from_user.id}'").fetchone()[0]
        if card_index + 1 < len(user_card_ids):
            cursor.execute(f"UPDATE indexes SET card_index=card_index+1 WHERE user_id='{callback.from_user.id}'")
            conn.commit()
            card_index += 1
            card_info = cursor.execute(f"SELECT id, player, team, rank, score FROM cards WHERE id='{user_card_ids[card_index]}'").fetchone()
            card = utils.Card(card_info)
            if callback.data.split("_")[-1] == "trans":
                cursor.execute(f"UPDATE indexes SET card_transfer_index={card.id} WHERE user_id='{callback.from_user.id}'")
                conn.commit()
                cursor.close()
                await draw_card(typ="base", tek=card_index + 1, all=len(user_card_ids), is_transfer=True, card=card, callback=callback)
            else:
                cursor.close()
                await draw_card(typ="base", tek=card_index + 1, all=len(user_card_ids), card=card, callback=callback)
        else:
            await callback.answer("–≠—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è –∫–∞—Ä—Ç–æ—á–∫–∞ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏")
            cursor.close()

    elif callback.data.split("_")[-1] == "search":
        from data.forms import search_cards

        conn = sqlite3.connect('database.db')
        cursor = conn.cursor()
        card_search_index = cursor.execute(f"SELECT card_search_index FROM indexes WHERE user_id='{callback.from_user.id}'").fetchone()[0]
        if card_search_index + 1 < len(search_cards):
            cursor.execute(f"UPDATE indexes SET card_search_index=card_search_index+1 WHERE user_id='{callback.from_user.id}'")
            conn.commit()
            card_search_index += 1
            card = utils.Card(search_cards[card_search_index])
            if callback.data.split("_")[-2] == "trans":
                cursor.execute(f"UPDATE indexes SET card_transfer_index={card.id} WHERE user_id='{callback.from_user.id}'")
                conn.commit()
                cursor.close()
                await draw_card(typ="search", tek=card_search_index + 1, is_transfer=True, all=len(search_cards), card=card, callback=callback)
            else:
                cursor.close()
                await draw_card(typ="search", tek=card_search_index + 1, all=len(search_cards), card=card, callback=callback)
        else:
            cursor.close()
            await callback.answer("–≠—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è –∫–∞—Ä—Ç–æ—á–∫–∞")

    elif callback.data.split("_")[-1] == "rank":
        from data.utils import search_cards
        conn = sqlite3.connect('database.db')
        cursor = conn.cursor()
        card_rank_index = cursor.execute(f"SELECT card_rank_index FROM indexes WHERE user_id='{callback.from_user.id}'").fetchone()[0]
        if card_rank_index + 1 < len(search_cards):
            cursor.execute(f"UPDATE indexes SET card_rank_index=card_rank_index+1 WHERE user_id='{callback.from_user.id}'")
            conn.commit()
            cursor.close()
            card_rank_index += 1
            card = utils.Card(search_cards[card_rank_index])
            if callback.data.split("_")[-2] == "trans":
                cursor.execute(f"UPDATE indexes SET card_transfer_index={card.id} WHERE user_id='{callback.from_user.id}'")
                conn.commit()
                cursor.close()
                await draw_card(typ="rank", tek=card_rank_index + 1, all=len(search_cards), is_transfer=True, card=card,
                                callback=callback)
            else:
                cursor.close()
                await draw_card(typ="rank", tek=card_rank_index + 1, all=len(search_cards), card=card,
                                callback=callback)
        else:
            cursor.close()
            await callback.answer("–≠—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è –∫–∞—Ä—Ç–æ—á–∫–∞")

    elif callback.data.split("_")[-1] == "team":
        from data.forms import team_cards
        conn = sqlite3.connect('database.db')
        cursor = conn.cursor()
        card_team_index = cursor.execute(f"SELECT card_team_index FROM indexes WHERE user_id='{callback.from_user.id}'").fetchone()[0]

        if card_team_index + 1 < len(team_cards):
            cursor.execute(f"UPDATE indexes SET card_team_index=card_team_index+1 WHERE user_id='{callback.from_user.id}'")
            conn.commit()
            cursor.close()
            card_team_index += 1
            card = utils.Card(team_cards[card_team_index])
            await draw_card(typ="team", tek=card_team_index + 1, all=len(team_cards), card=card,
                            callback=callback)
        else:
            cursor.close()
            await callback.answer("–≠—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è –∫–∞—Ä—Ç–æ—á–∫–∞")


async def prev_card(callback: types.CallbackQuery):
    if callback.data.split("_")[-1] == "card" or callback.data.split("_")[-1] == "trans":
        conn = sqlite3.connect('database.db')
        cursor = conn.cursor()

        user_card_ids = [i[0] for i in cursor.execute(f"SELECT card_id FROM collections WHERE user_id='{callback.from_user.id}'").fetchall()[::-1]]
        card_index = cursor.execute(f"SELECT card_index FROM indexes WHERE user_id='{callback.from_user.id}'").fetchone()[0]
        if card_index - 1 >= 0:
            cursor.execute(f"UPDATE indexes SET card_index=card_index-1 WHERE user_id='{callback.from_user.id}'")
            conn.commit()
            card_index -= 1
            card_info = cursor.execute(
                f"SELECT id, player, team, rank, score FROM cards WHERE id='{user_card_ids[card_index]}'").fetchone()
            card = utils.Card(card_info)
            if callback.data.split("_")[-1] == "trans":
                cursor.execute(
                    f"UPDATE indexes SET card_transfer_index={card.id} WHERE user_id='{callback.from_user.id}'")
                conn.commit()
                cursor.close()
                await draw_card(typ="base", tek=card_index + 1, all=len(user_card_ids), is_transfer=True, card=card, callback=callback)
            else:
                cursor.close()
                await draw_card(typ="base", tek=card_index + 1, all=len(user_card_ids), card=card, callback=callback)
        else:
            cursor.close()
            await callback.answer("–≠—Ç–æ –ø–µ—Ä–≤–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏")

    elif callback.data.split("_")[-1] == "search":
        from data.forms import search_cards
        conn = sqlite3.connect('database.db')
        cursor = conn.cursor()
        card_search_index = cursor.execute(f"SELECT card_search_index FROM indexes WHERE user_id='{callback.from_user.id}'").fetchone()[0]
        if card_search_index - 1 >= 0:
            cursor.execute(f"UPDATE indexes SET card_search_index=card_search_index-1 WHERE user_id='{callback.from_user.id}'")
            conn.commit()
            card_search_index -= 1
            card = utils.Card(search_cards[card_search_index])
            if callback.data.split("_")[-2] == "trans":
                cursor.execute(f"UPDATE indexes SET card_transfer_index={card.id} WHERE user_id='{callback.from_user.id}'")
                conn.commit()
                cursor.close()
                await draw_card(typ="search", tek=card_search_index + 1, is_transfer=True, all=len(search_cards), card=card, callback=callback)
            else:
                cursor.close()
                await draw_card(typ="search", tek=card_search_index + 1, all=len(search_cards), card=card, callback=callback)
        else:
            cursor.close()
            await callback.answer("–≠—Ç–æ –ø–µ—Ä–≤–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞")

    elif callback.data.split("_")[-1] == "rank":
        from data.utils import search_cards
        conn = sqlite3.connect('database.db')
        cursor = conn.cursor()
        card_rank_index = cursor.execute(f"SELECT card_rank_index FROM indexes WHERE user_id='{callback.from_user.id}'").fetchone()[0]
        if card_rank_index - 1 >= 0:
            cursor.execute(f"UPDATE indexes SET card_rank_index=card_rank_index-1 WHERE user_id='{callback.from_user.id}'")
            conn.commit()
            card_rank_index -= 1
            card = utils.Card(search_cards[card_rank_index])
            if callback.data.split("_")[-2] == "trans":
                cursor.execute(f"UPDATE indexes SET card_transfer_index={card.id} WHERE user_id='{callback.from_user.id}'")
                conn.commit()
                cursor.close()
                await draw_card(typ="rank", tek=card_rank_index + 1, all=len(search_cards), is_transfer=True, card=card,
                                callback=callback)
            else:
                cursor.close()
                await draw_card(typ="rank", tek=card_rank_index + 1, all=len(search_cards), card=card,
                                callback=callback)
        else:
            cursor.close()
            await callback.answer("–≠—Ç–æ –ø–µ—Ä–≤–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞")

    elif callback.data.split("_")[-1] == "team":
        from data.forms import team_cards
        conn = sqlite3.connect('database.db')
        cursor = conn.cursor()
        card_team_index = cursor.execute(f"SELECT card_team_index FROM indexes WHERE user_id='{callback.from_user.id}'").fetchone()[0]
        if card_team_index - 1 >= 0:
            cursor.execute(f"UPDATE indexes SET card_team_index=card_team_index-1 WHERE user_id='{callback.from_user.id}'")
            conn.commit()
            cursor.close()
            card_team_index -= 1
            card = utils.Card(team_cards[card_team_index])
            await draw_card(typ="team", tek=card_team_index + 1, all=len(team_cards), card=card,
                            callback=callback)
        else:
            cursor.close()
            await callback.answer("–≠—Ç–æ –ø–µ—Ä–≤–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞")


async def first_card(callback: types.CallbackQuery):
    if callback.data.split("_")[-1] == "card" or callback.data.split("_")[-1] == "trans":
        conn = sqlite3.connect('database.db')
        cursor = conn.cursor()
        card_index = cursor.execute(f"SELECT card_index FROM indexes WHERE user_id='{callback.from_user.id}'").fetchone()[0]
        if card_index != 0:
            cursor.execute(f"UPDATE indexes SET card_index=0 WHERE user_id='{callback.from_user.id}'")
            conn.commit()
            user_card_id = cursor.execute(f"SELECT card_id FROM collections WHERE user_id='{callback.from_user.id}'").fetchall()[::-1][0][0]
            length = cursor.execute(f"SELECT COUNT(card_id) FROM collections WHERE user_id='{callback.from_user.id}'").fetchone()[0]
            card_info = cursor.execute(f"SELECT id, player, team, rank, score FROM cards WHERE id='{user_card_id}'").fetchone()
            card = utils.Card(card_info)
            if callback.data.split("_")[-1] == "trans":
                cursor.execute(f"UPDATE indexes SET card_transfer_index={card.id} WHERE user_id='{callback.from_user.id}'")
                conn.commit()
                cursor.close()
                await draw_card(typ="base", tek=1, all=length, is_transfer=True, card=card, callback=callback)
            else:
                cursor.close()
                await draw_card(typ="base", tek=1, all=length, card=card, callback=callback)
        else:
            cursor.close()
            await callback.answer("–≠—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è –∫–∞—Ä—Ç–∞, –¥–æ–±–∞–≤–ª–µ–Ω–Ω–∞—è –≤ –≤–∞—à—É –∫–æ–ª–ª–µ–∫—Ü–∏—é")

    elif callback.data.split("_")[-1] == "search":
        from data.forms import search_cards
        conn = sqlite3.connect('database.db')
        cursor = conn.cursor()
        card_search_index = cursor.execute(f"SELECT card_search_index FROM indexes WHERE user_id='{callback.from_user.id}'").fetchone()[0]
        if card_search_index != 0:
            cursor.execute(f"UPDATE indexes SET card_search_index=0 WHERE user_id='{callback.from_user.id}'")
            conn.commit()
            card_search_index = 0
            card = utils.Card(search_cards[card_search_index])
            if callback.data.split("_")[-2] == "trans":
                cursor.execute(
                    f"UPDATE indexes SET card_transfer_index={card.id} WHERE user_id='{callback.from_user.id}'")
                conn.commit()
                cursor.close()
                await draw_card(typ="search", tek=card_search_index + 1, is_transfer=True, all=len(search_cards), card=card, callback=callback)
            else:
                cursor.close()
                await draw_card(typ="search", tek=card_search_index + 1, all=len(search_cards), card=card, callback=callback)
        else:
            cursor.close()
            await callback.answer("–≠—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è –∫–∞—Ä—Ç–∞, –¥–æ–±–∞–≤–ª–µ–Ω–Ω–∞—è –≤ –≤–∞—à—É –∫–æ–ª–ª–µ–∫—Ü–∏—é")

    elif callback.data.split("_")[-1] == "rank":
        from data.utils import search_cards
        conn = sqlite3.connect('database.db')
        cursor = conn.cursor()
        card_rank_index = cursor.execute(f"SELECT card_rank_index FROM indexes WHERE user_id='{callback.from_user.id}'").fetchone()[0]
        if card_rank_index != 0:
            cursor.execute(f"UPDATE indexes SET card_rank_index=0 WHERE user_id='{callback.from_user.id}'")
            conn.commit()
            card_rank_index = 0
            card = utils.Card(search_cards[card_rank_index])
            if callback.data.split("_")[-2] == "trans":
                cursor.execute(f"UPDATE indexes SET card_transfer_index={card.id} WHERE user_id='{callback.from_user.id}'")
                conn.commit()
                cursor.close()
                await draw_card(typ="rank", tek=card_rank_index + 1, all=len(search_cards), is_transfer=True, card=card,
                                callback=callback)
            else:
                cursor.close()
                await draw_card(typ="rank", tek=card_rank_index + 1, all=len(search_cards), card=card,
                                callback=callback)
        else:
            cursor.close()
            await callback.answer("–≠—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è –∫–∞—Ä—Ç–∞, –¥–æ–±–∞–≤–ª–µ–Ω–Ω–∞—è –≤ –≤–∞—à—É –∫–æ–ª–ª–µ–∫—Ü–∏—é")

    elif callback.data.split("_")[-1] == "team":
        from data.forms import team_cards
        conn = sqlite3.connect('database.db')
        cursor = conn.cursor()
        card_team_index = cursor.execute(f"SELECT card_team_index FROM indexes WHERE user_id='{callback.from_user.id}'").fetchone()[0]
        if card_team_index != 0:
            cursor.execute(f"UPDATE indexes SET card_team_index=0 WHERE user_id='{callback.from_user.id}'")
            conn.commit()
            cursor.close()
            card_team_index = 0
            card = utils.Card(team_cards[card_team_index])
            await draw_card(typ="team", tek=card_team_index + 1, all=len(team_cards), card=card,
                            callback=callback)
        else:
            cursor.close()
            await callback.answer("–≠—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è –∫–∞—Ä—Ç–∞, –¥–æ–±–∞–≤–ª–µ–Ω–Ω–∞—è –≤ –≤–∞—à—É –∫–æ–ª–ª–µ–∫—Ü–∏—é")

async def last_card(callback: types.CallbackQuery):
    if callback.data.split("_")[-1] == "card" or callback.data.split("_")[-1] == "trans":
        conn = sqlite3.connect('database.db')
        cursor = conn.cursor()

        user_card_id = cursor.execute(f"SELECT card_id FROM collections WHERE user_id='{callback.from_user.id}'").fetchall()[::-1]
        card_index = cursor.execute(f"SELECT card_index FROM indexes WHERE user_id='{callback.from_user.id}'").fetchone()[0]
        if card_index != len(user_card_id) - 1:
            cursor.execute(f"UPDATE indexes SET card_index='{len(user_card_id) - 1}' WHERE user_id='{callback.from_user.id}'")
            conn.commit()
            card_index = len(user_card_id) - 1
            length = cursor.execute(f"SELECT COUNT(card_id) FROM collections WHERE user_id='{callback.from_user.id}'").fetchone()[0]
            card_info = cursor.execute(f"SELECT id, player, team, rank, score FROM cards WHERE id='{user_card_id[card_index][0]}'").fetchone()
            card = utils.Card(card_info)
            if callback.data.split("_")[-1] == "trans":
                cursor.execute(f"UPDATE indexes SET card_transfer_index={card.id} WHERE user_id='{callback.from_user.id}'")
                conn.commit()
                cursor.close()
                await draw_card(typ="base", tek=card_index + 1, is_transfer=True, all=length, card=card, callback=callback)
            else:
                cursor.close()
                await draw_card(typ="base", tek=card_index+1, all=length, card=card, callback=callback)
        else:
            cursor.close()
            await callback.answer("–≠—Ç–æ –ø–µ—Ä–≤–∞—è –∫–∞—Ä—Ç–∞, –¥–æ–±–∞–≤–ª–µ–Ω–Ω–∞—è –≤ –≤–∞—à—É –∫–æ–ª–ª–µ–∫—Ü–∏—é")

    elif callback.data.split("_")[-1] == "search":
        from data.forms import search_cards
        conn = sqlite3.connect('database.db')
        cursor = conn.cursor()
        card_search_index = cursor.execute(f"SELECT card_search_index FROM indexes WHERE user_id='{callback.from_user.id}'").fetchone()[0]

        if (card_search_index != len(search_cards) - 1) and len(search_cards) != 1:
            cursor.execute(f"UPDATE indexes SET card_search_index='{len(search_cards) - 1}' WHERE user_id='{callback.from_user.id}'")
            conn.commit()
            card_search_index = len(search_cards) - 1
            card = utils.Card(search_cards[card_search_index])
            if callback.data.split("_")[-2] == "trans":
                cursor.execute(f"UPDATE indexes SET card_transfer_index={card.id} WHERE user_id='{callback.from_user.id}'")
                conn.commit()
                cursor.close()
                await draw_card(typ="search", tek=card_search_index + 1, is_transfer=True, all=len(search_cards), card=card, callback=callback)
            else:
                cursor.close()
                await draw_card(typ="search", tek=card_search_index + 1, all=len(search_cards), card=card, callback=callback)
        else:
            cursor.close()
            await callback.answer("–≠—Ç–æ –ø–µ—Ä–≤–∞—è –∫–∞—Ä—Ç–∞, –¥–æ–±–∞–≤–ª–µ–Ω–Ω–∞—è –≤ –≤–∞—à—É –∫–æ–ª–ª–µ–∫—Ü–∏—é")

    elif callback.data.split("_")[-1] == "rank":
        from data.utils import search_cards
        conn = sqlite3.connect('database.db')
        cursor = conn.cursor()
        card_rank_index = cursor.execute(f"SELECT card_rank_index FROM indexes WHERE user_id='{callback.from_user.id}'").fetchone()[0]

        if (card_rank_index != len(search_cards) - 1) and len(search_cards) != 1:
            cursor.execute(f"UPDATE indexes SET card_rank_index='{len(search_cards) - 1}' WHERE user_id='{callback.from_user.id}'")
            conn.commit()
            card_rank_index = len(search_cards) - 1
            card = utils.Card(search_cards[card_rank_index])
            if callback.data.split("_")[-2] == "trans":
                cursor.execute(f"UPDATE indexes SET card_transfer_index={card.id} WHERE user_id='{callback.from_user.id}'")
                conn.commit()
                cursor.close()
                await draw_card(typ="rank", tek=card_rank_index + 1, all=len(search_cards), is_transfer=True, card=card,
                                callback=callback)
            else:
                cursor.close()
                await draw_card(typ="rank", tek=card_rank_index + 1, all=len(search_cards), card=card,
                                callback=callback)
        else:
            cursor.close()
            await callback.answer("–≠—Ç–æ –ø–µ—Ä–≤–∞—è –∫–∞—Ä—Ç–∞, –¥–æ–±–∞–≤–ª–µ–Ω–Ω–∞—è –≤ –≤–∞—à—É –∫–æ–ª–ª–µ–∫—Ü–∏—é")

    elif callback.data.split("_")[-1] == "team":
        from data.forms import team_cards
        conn = sqlite3.connect('database.db')
        cursor = conn.cursor()
        card_team_index = cursor.execute(f"SELECT card_team_index FROM indexes WHERE user_id='{callback.from_user.id}'").fetchone()[0]

        if (card_team_index != len(team_cards) - 1) and len(team_cards) != 1:
            cursor.execute(f"UPDATE indexes SET card_team_index='{len(team_cards) - 1}' WHERE user_id='{callback.from_user.id}'")
            conn.commit()
            cursor.close()
            card_team_index = len(team_cards) - 1
            card = utils.Card(team_cards[card_team_index])
            print(card_team_index + 1)
            await draw_card(typ="team", tek=card_team_index + 1, all=len(team_cards), card=card,
                            callback=callback)
        else:
            await callback.answer("–≠—Ç–æ –ø–µ—Ä–≤–∞—è –∫–∞—Ä—Ç–∞, –¥–æ–±–∞–≤–ª–µ–Ω–Ω–∞—è –≤ –≤–∞—à—É –∫–æ–ª–ª–µ–∫—Ü–∏—é")


async def to_collection(callback: types.CallbackQuery):
    conn = sqlite3.connect('database.db')
    cursor = conn.cursor()
    cursor.execute(f"UPDATE indexes SET card_index=0 WHERE user_id='{callback.from_user.id}'")
    conn.commit()
    await callback.message.delete()
    user_card_id = cursor.execute(f"SELECT card_id FROM collections WHERE user_id='{callback.from_user.id}'").fetchall()[::-1][0][0]
    length = cursor.execute(f"SELECT COUNT(card_id) FROM collections WHERE user_id='{callback.from_user.id}'").fetchone()[0]
    card_info = cursor.execute(f"SELECT id, player, team, rank, score FROM cards WHERE id='{user_card_id}'").fetchone()
    cursor.close()
    card = utils.Card(card_info)
    await draw_card(typ="base", tek=1, all=length, card=card, callback=callback)

async def search(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer("üìù –í–≤–µ–¥–∏ –Ω–∏–∫–Ω–µ–π–º –∏–≥—Ä–æ–∫–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ç—ã —Ö–æ—á–µ—à—å –Ω–∞–π—Ç–∏ –≤ —Å–≤–æ–µ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏:")
    if callback.data.split("_")[-1] != "trans":
        await state.set_state(Search.NICKNAME)
    else:
        await state.set_state(Search.NICKNAME_TRANS)


async def by_rank(callback: types.CallbackQuery):
    if callback.data.split("_")[-1] == "trans":
        await callback.message.answer(
            "‚öúÔ∏è –ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—Ç—ã –∏–∑ —Å–≤–æ–µ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –ø–æ –∑–≤–∞–Ω–∏—é. –í—ã–±–µ—Ä–∏ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–µ –∑–≤–∞–Ω–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ:",
            reply_markup=ranks_ikb_trans)
    else:
        await callback.message.answer(
            "‚öúÔ∏è –ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—Ç—ã –∏–∑ —Å–≤–æ–µ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –ø–æ –∑–≤–∞–Ω–∏—é. –í—ã–±–µ—Ä–∏ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–µ –∑–≤–∞–Ω–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ:",
            reply_markup=ranks_ikb)

async def sort_rank(callback: types.CallbackQuery):
    total = ""
    await callback.message.delete()
    t = False
    if callback.data.split("_")[-1] == "trans":
        c = callback.data[:-6]
        t = True
    else:
        c = callback.data

    match c:
        case "rank_silver":
            total = "–°–∏–ª—å–≤–µ—Ä"
        case "rank_gold_nova":
            total = "–ó–≤–µ–∑–¥–∞"
        case "rank_ak":
            total = "–ö–∞–ª–∞—à"
        case "rank_ak_wreaths":
            total = "–ö–∞–ª–∞—à —Å –≤–µ–Ω–∫–∞–º–∏"
        case "rank_two_ak":
            total = "–î–≤–∞ –∫–∞–ª–∞—à–∞"
        case "rank_big_star":
            total = "–ë–∏–≥ —Å—Ç–∞—Ä"
        case "rank_berkut":
            total = "–ë–µ—Ä–∫—É—Ç"
        case "rank_lem":
            total = "–õ–µ–º"
        case "rank_suprim":
            total = "–°—É–ø—Ä–∏–º"
        case "rank_global":
            total = "–ì–ª–æ–±–∞–ª"
    await sort_by_rank(total, callback, trans=t)


async def by_team(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer(
        "üë• –ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—Ç—ã –∏–∑ —Å–≤–æ–µ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –ø–æ –∫–æ–º–∞–Ω–¥–µ. –í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –Ω–∏–∂–µ:")
    await state.set_state(Team.TEAM)

async def create_transfer(callback: types.CallbackQuery):
    await callback.message.answer(f"‚ôªÔ∏è –ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –æ–±–º–µ–Ω—è—Ç—å—Å—è –∫–∞—Ä—Ç–∞–º–∏ —Å –¥—Ä—É–≥–∏–º–∏ –∏–≥—Ä–æ–∫–∞–º–∏! "
                                  f"–í—ã–±–µ—Ä–∏ –∫–∞—Ä—Ç—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—á–µ—à—å –æ–±–º–µ–Ω—è—Ç—å. –î–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –º–æ–∂–µ—à—å "
                                  "–æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å —Å–≤–æ–∏ –∫–∞—Ä—Ç—ã –ø–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–º—É –∫—Ä–∏—Ç–µ—Ä–∏—é.")

    conn = sqlite3.connect('database.db')
    cursor = conn.cursor()
    cursor.execute(f"UPDATE indexes SET card_index=0 WHERE user_id='{callback.from_user.id}'")
    conn.commit()
    try:
        user_card_id = cursor.execute(f"SELECT card_id FROM collections WHERE user_id='{callback.from_user.id}'").fetchall()[::-1][0][0]
        length = cursor.execute(f"SELECT COUNT(card_id) FROM collections WHERE user_id='{callback.from_user.id}'").fetchone()[0]
        card_info = cursor.execute(f"SELECT id, player, team, rank, score FROM cards WHERE id='{user_card_id}'").fetchone()
        cursor.execute(f"UPDATE indexes SET card_transfer_index='{card_info[0]}' WHERE user_id='{callback.from_user.id}'")
        conn.commit()
        cursor.close()
        if len(card_info) == 5:
            card = utils.Card(card_info)
            await draw_card(typ="base", tek=1, is_transfer=True, all=length, card=card, message=callback.message)
        else:
            await callback.message.answer("–ö–∞–∂–µ—Ç—Å—è, –≤ —Ç–≤–æ–µ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –Ω–µ—Ç –∫–∞—Ä—Ç ‚ùå")
    except IndexError as e:
        await callback.message.answer("–ö–∞–∂–µ—Ç—Å—è, –≤ —Ç–≤–æ–µ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –Ω–µ—Ç –∫–∞—Ä—Ç ‚ùå")


async def add_card(callback: types.CallbackQuery, state: FSMContext):
    conn = sqlite3.connect('database.db')
    cursor = conn.cursor()
    is_answer = cursor.execute(f"SELECT status FROM transfers WHERE user_id_2='{callback.from_user.id}' AND status='answer'").fetchone()
    if not is_answer:
        cursor.close()
        await callback.message.answer("üìù –ö–∞—Ä—Ç–∞ –≤—ã–±—Ä–∞–Ω–∞, —É–∫–∞–∂–∏ ID –∏–≥—Ä–æ–∫–∞, —Å –∫–æ—Ç–æ—Ä—ã–º —Ç—ã –±—ã —Ö–æ—Ç–µ–ª —Å–æ–≤–µ—Ä—à–∏—Ç—å –æ–±–º–µ–Ω")
        await state.set_state(TransferID.ID)
    else:
        id = cursor.execute(f"SELECT user_id_1 FROM transfers WHERE user_id_2='{callback.from_user.id}' AND status='answer'").fetchone()[0]
        # –í—Ç–æ—Ä–∞—è –∫–∞—Ä—Ç–∞
        card_id = cursor.execute(f"SELECT card_transfer_index FROM indexes WHERE user_id='{callback.from_user.id}'").fetchone()[0]
        print(card_id)
        cursor.execute(f"UPDATE transfers SET card_id_2='{card_id}' WHERE user_id_2='{callback.from_user.id}' AND status='answer'").fetchone()

        card_info = cursor.execute(f"SELECT id, player, team, rank, score FROM cards WHERE id='{card_id}'").fetchone()
        print(card_info)
        transfer_card = utils.Card(card_info)

        text = f"""üî§ –ù–∏–∫–Ω–µ–π–º: <b>{transfer_card.name}</b> 

üïπ –ö–æ–º–∞–Ω–¥–∞: <b>{transfer_card.team}</b>

üéñ –ó–≤–∞–Ω–∏–µ: <b>{transfer_card.rank}</b>

üî¢ –û—á–∫–∏: <b>{transfer_card.score}</b>"""

        photo = FSInputFile(path=f"./cards/{transfer_card.id}.webp")
        text = f"<b>üëÄ –ò–≥—Ä–æ–∫ {callback.from_user.id} –ø—Ä–∏—Å–ª–∞–ª –æ—Ç–≤–µ—Ç –Ω–∞ —Ç–≤–æ–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–º–µ–Ω. –ü–æ—Å–º–æ—Ç—Ä–∏, —á—Ç–æ –æ–Ω –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç:</b>\n\n{text}"

        rowid = cursor.execute(f"SELECT id FROM collections WHERE user_id='{callback.from_user.id}' AND card_id='{transfer_card.id}'").fetchall()[::-1][0]
        cursor.execute(f"DELETE FROM collections WHERE id='{rowid[0]}'")
        conn.commit()
        cursor.close()

        accept_transfer_ikb = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å",
                    callback_data=f"last_accept_{callback.from_user.id}_{card_id}"
                )],
            [InlineKeyboardButton(
                text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å",
                callback_data=f"last_decline_{callback.from_user.id}_{card_id}"
            )]
        ], resize_keyboard=True)

        await bot.send_photo(chat_id=int(id), photo=photo, caption=text, parse_mode="HTML", reply_markup=accept_transfer_ikb)
        await callback.message.answer("‚úÖ –û—Ç–≤–µ—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–º–µ–Ω –∏–≥—Ä–æ–∫—É –Ω–∏–∫–Ω–µ–π–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")


async def accept_transfer(callback: types.CallbackQuery):
    conn = sqlite3.connect('database.db')
    cursor = conn.cursor()

    await callback.message.answer("‚ôªÔ∏è –í—ã–±–µ—Ä–∏ –∫–∞—Ä—Ç—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—á–µ—à—å –æ–±–º–µ–Ω—è—Ç—å. –î–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –º–æ–∂–µ—à—å –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å —Å–≤–æ–∏ –∫–∞—Ä—Ç—ã –ø–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–º—É –∫—Ä–∏—Ç–µ—Ä–∏—é.")

    user_card_id = cursor.execute(f"SELECT card_id FROM collections WHERE user_id='{callback.from_user.id}'").fetchall()[::-1][0][0]
    print(user_card_id)
    card_info = cursor.execute(f"SELECT id, player, team, rank, score FROM cards WHERE id='{user_card_id}'").fetchone()
    cursor.execute(f"UPDATE transfers SET status='answer' WHERE user_id_1='{callback.message.caption.split()[2]}' AND user_id_2='{callback.from_user.id}' AND status='active'").fetchone()
    conn.commit()
    cursor.close()
    card = utils.Card(card_info)
    await draw_card(typ="base", tek=1, is_transfer=True, all=1, card=card, callback=callback, send=True)


async def decline_transfer(callback: types.CallbackQuery):
    card_id = int(callback.data.split("_")[-1])
    user_id = callback.message.caption.split()[2]
    conn = sqlite3.connect('./database.db')
    cursor = conn.cursor()
    cursor.execute(f"INSERT INTO collections ('user_id', 'card_id') VALUES ('{user_id}', '{card_id}')")
    conn.commit()
    cursor.execute(f"UPDATE transfers SET status='decline' WHERE user_id_2='{callback.from_user.id}' AND user_id_1='{user_id}' AND card_id_1='{card_id}' AND status='active'")
    conn.commit()
    await callback.message.answer(f"‚ùå –¢—ã –æ—Ç–∫–ª–æ–Ω–∏–ª –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–º–µ–Ω –æ—Ç –∏–≥—Ä–æ–∫–∞ c ID {user_id}")
    await bot.send_message(chat_id=int(user_id), text=f"‚ùå –ò–≥—Ä–æ–∫ c ID {callback.from_user.id} –æ—Ç–∫–ª–æ–Ω–∏–ª —Ç–≤–æ–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–º–µ–Ω")
    cursor.close()


async def last_accept(callback: types.CallbackQuery):
    user_id_2, card_id_2 = callback.data.split("_")[-2], callback.data.split("_")[-1]
    conn = sqlite3.connect('./database.db')
    cursor = conn.cursor()
    card_id_1 = cursor.execute(f"SELECT card_id_1 FROM transfers WHERE user_id_2='{user_id_2}' AND user_id_1='{callback.from_user.id}' AND card_id_2='{int(card_id_2)}' AND status='answer'").fetchone()[0]
    cursor.execute(f"INSERT INTO collections (user_id, card_id) VALUES ('{callback.from_user.id}', '{card_id_2}')")
    conn.commit()
    cursor.execute(f"INSERT INTO collections (user_id, card_id) VALUES ('{user_id_2}', '{card_id_1}')")
    conn.commit()
    cursor.execute(f"UPDATE transfers SET status='finished' WHERE user_id_2='{user_id_2}' AND user_id_1='{callback.from_user.id}' AND card_id_2='{card_id_2}' AND status='answer'")
    conn.commit()
    cursor.close()
    await bot.send_message(chat_id=int(user_id_2), text=f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Ç–µ–±—è —Å —É—Å–ø–µ—à–Ω—ã–º –æ–±–º–µ–Ω–æ–º —Å –∏–≥—Ä–æ–∫–æ–º {callback.from_user.id}! –ù–∞—Å–ª–∞–∂–¥–∞–π—Å—è —Å–≤–æ–µ–π –Ω–æ–≤–æ–π –∫–∞—Ä—Ç–æ–π!", parse_mode="HTML")
    await callback.message.answer(f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Ç–µ–±—è —Å —É—Å–ø–µ—à–Ω—ã–º –æ–±–º–µ–Ω–æ–º —Å –∏–≥—Ä–æ–∫–æ–º {user_id_2}! –ù–∞—Å–ª–∞–∂–¥–∞–π—Å—è —Å–≤–æ–µ–π –Ω–æ–≤–æ–π –∫–∞—Ä—Ç–æ–π!")


async def last_decline(callback: types.CallbackQuery):
    user_id_2, card_id_2 = callback.data.split("_")[-2], callback.data.split("_")[-1]
    conn = sqlite3.connect('./database.db')
    cursor = conn.cursor()
    card_id_1 = cursor.execute(f"SELECT card_id_1 FROM transfers WHERE user_id_2='{user_id_2}' AND user_id_1='{callback.from_user.id}' AND card_id_2='{int(card_id_2)}' AND status='answer'").fetchone()[0]
    cursor.execute(f"INSERT INTO collections ('user_id', 'card_id') VALUES ('{callback.from_user.id}', '{card_id_1}')")
    conn.commit()
    cursor.execute(f"INSERT INTO collections ('user_id', 'card_id') VALUES ('{user_id_2}', '{card_id_2}')")
    conn.commit()
    cursor.execute(f"UPDATE transfers SET status='decline' WHERE user_id_2='{user_id_2}' AND user_id_1='{callback.from_user.id}' AND card_id_1='{card_id_1}' AND card_id_2='{card_id_2}' AND status='answer'")
    conn.commit()
    await callback.message.answer(f"‚ùå –¢—ã –æ—Ç–∫–ª–æ–Ω–∏–ª –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–º–µ–Ω –æ—Ç –∏–≥—Ä–æ–∫–∞ c ID {user_id_2}")
    await bot.send_message(chat_id=int(user_id_2), text=f"‚ùå –ò–≥—Ä–æ–∫ c ID {callback.from_user.id} –æ—Ç–∫–ª–æ–Ω–∏–ª —Ç–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ –æ–±–º–µ–Ω")
    cursor.close()

async def tek_transfers(callback: types.CallbackQuery):
    # TODO
    conn = sqlite3.connect('./database.db')
    cursor = conn.cursor()
    has_transfer = cursor.execute(f"SELECT * FROM transfers WHERE user_id_1='{callback.from_user.id}' AND status='active'").fetchone()

    if has_transfer:
        await callback.message.answer("üîú –ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ —Ç–µ–∫—É—â–∏–µ –æ–±–º–µ–Ω—ã!")
        tek_transfer_ikb = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="‚¨ÖÔ∏è",
                    callback_data=f"tek_prev"
                ), InlineKeyboardButton(
                    text="‚û°Ô∏è",
                    callback_data=f"tek_next"
                )],
            [InlineKeyboardButton(
                text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å",
                callback_data=f"tek_decline"
            )]
        ], resize_keyboard=True)
        cursor.execute(f"UPDATE indexes SET card_transfer_index='0' WHERE user_id={callback.from_user.id}")
        conn.commit()
        card = utils.Card(cursor.execute(f"SELECT id, player, team, rank, score FROM cards WHERE id='{has_transfer[2]}'").fetchone())
        cursor.close()

        text = f"""<b>–û–ë–ú–ï–ù C –ò–ì–†–û–ö–û–ú <code>{has_transfer[1]}</code></b>
        
üî§ –ù–∏–∫–Ω–µ–π–º: <b>{card.name}</b> 

üïπ –ö–æ–º–∞–Ω–¥–∞: <b>{card.team}</b>

üéñ –ó–≤–∞–Ω–∏–µ: <b>{card.rank}</b>

üî¢ –û—á–∫–∏: <b>{card.score}</b>"""

        photo = FSInputFile(path=f"./cards/{card.id}.webp")

        await callback.message.answer_photo(photo, caption=text, parse_mode="HTML", reply_markup=tek_transfer_ikb)


    else:
        await callback.message.answer(f"üóø –£ —Ç–µ–±—è –Ω–µ—Ç —Ç–µ–∫—É—â–∏—Ö –æ–±–º–µ–Ω–æ–≤")
        cursor.close()

async def tek_next(callback: types.CallbackQuery):
    conn = sqlite3.connect('database.db')
    cursor = conn.cursor()
    transfer_card_ids = cursor.execute(f"SELECT card_id_1, user_id_2 FROM transfers WHERE user_id_1='{callback.from_user.id}' AND status='active'").fetchall()
    card_index = cursor.execute(f"SELECT card_transfer_index FROM indexes WHERE user_id='{callback.from_user.id}'").fetchone()[0]
    if card_index + 1 < len(transfer_card_ids):
        cursor.execute(f"UPDATE indexes SET card_transfer_index=card_transfer_index+1 WHERE user_id='{callback.from_user.id}'")
        conn.commit()
        card_index += 1
        tek_transfer_ikb = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="‚¨ÖÔ∏è",
                    callback_data=f"tek_prev"
                ), InlineKeyboardButton(
                text="‚û°Ô∏è",
                callback_data=f"tek_next"
            )],
            [InlineKeyboardButton(
                text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å",
                callback_data=f"tek_decline"
            )]
        ], resize_keyboard=True)
        card = utils.Card(cursor.execute(f"SELECT id, player, team, rank, score FROM cards WHERE id='{transfer_card_ids[card_index][0]}'").fetchone())
        cursor.close()

        text = f"""<b>–û–ë–ú–ï–ù C –ò–ì–†–û–ö–û–ú <code>{transfer_card_ids[card_index][1]}</code></b>

üî§ –ù–∏–∫–Ω–µ–π–º: <b>{card.name}</b> 

üïπ –ö–æ–º–∞–Ω–¥–∞: <b>{card.team}</b>

üéñ –ó–≤–∞–Ω–∏–µ: <b>{card.rank}</b>

üî¢ –û—á–∫–∏: <b>{card.score}</b>"""

        photo = FSInputFile(path=f"./cards/{card.id}.webp")

        await callback.message.edit_media(InputMediaPhoto(media=photo, caption=text), parse_mode="HTML", reply_markup=tek_transfer_ikb)
    else:
        cursor.close()
        await callback.answer("–≠—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ–±–º–µ–Ω, –æ–∂–∏–¥–∞—é—â–∏–π –≤—Å—Ç—Ä–µ—á–Ω–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.")

async def tek_prev(callback: types.CallbackQuery):
    conn = sqlite3.connect('database.db')
    cursor = conn.cursor()
    transfer_card_ids = cursor.execute(f"SELECT card_id_1, user_id_2 FROM transfers WHERE user_id_1='{callback.from_user.id}' AND status='active'").fetchall()
    card_index = cursor.execute(f"SELECT card_transfer_index FROM indexes WHERE user_id='{callback.from_user.id}'").fetchone()[0]
    if card_index - 1 >= 0:
        cursor.execute(f"UPDATE indexes SET card_transfer_index=card_transfer_index-1 WHERE user_id='{callback.from_user.id}'")
        conn.commit()
        card_index -= 1
        tek_transfer_ikb = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="‚¨ÖÔ∏è",
                    callback_data=f"tek_prev"
                ), InlineKeyboardButton(
                text="‚û°Ô∏è",
                callback_data=f"tek_next"
            )],
            [InlineKeyboardButton(
                text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å",
                callback_data=f"tek_decline"
            )]
        ], resize_keyboard=True)
        card = utils.Card(cursor.execute(f"SELECT id, player, team, rank, score FROM cards WHERE id='{transfer_card_ids[card_index][0]}'").fetchone())
        cursor.close()

        text = f"""<b>–û–ë–ú–ï–ù C –ò–ì–†–û–ö–û–ú <code>{transfer_card_ids[card_index][1]}</code></b>

üî§ –ù–∏–∫–Ω–µ–π–º: <b>{card.name}</b> 

üïπ –ö–æ–º–∞–Ω–¥–∞: <b>{card.team}</b>

üéñ –ó–≤–∞–Ω–∏–µ: <b>{card.rank}</b>

üî¢ –û—á–∫–∏: <b>{card.score}</b>"""

        photo = FSInputFile(path=f"./cards/{card.id}.webp")

        await callback.message.edit_media(InputMediaPhoto(media=photo, caption=text), parse_mode="HTML", reply_markup=tek_transfer_ikb)
    else:
        cursor.close()
        await callback.answer("–≠—Ç–æ –ø–µ—Ä–≤—ã–π –æ–±–º–µ–Ω, –æ–∂–∏–¥–∞—é—â–∏–π –≤—Å—Ç—Ä–µ—á–Ω–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.")


async def tek_decline(callback: types.CallbackQuery):
    conn = sqlite3.connect('database.db')
    cursor = conn.cursor()
    user_id = callback.message.caption.split()[3]
    try:
        id = cursor.execute(f"SELECT card_id_1 FROM transfers WHERE user_id_1='{callback.from_user.id}' AND user_id_2='{user_id}' AND status='active'").fetchone()[0]
        cursor.execute(f"UPDATE transfers SET status='decline' WHERE user_id_1='{callback.from_user.id}' AND user_id_2='{user_id}' AND status='active'").fetchone()
        conn.commit()
        cursor.execute(f"INSERT INTO collections ('user_id', 'card_id') VALUES ('{callback.from_user.id}', '{id}')")
        conn.commit()
        cursor.close()
        await callback.message.delete()
        await callback.message.answer(f"üóë –û–±–º–µ–Ω —Å –∏–≥—Ä–æ–∫–æ–º {user_id} —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω")
    except Exception as e:
        print(e)
        await callback.answer(f"–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫")


async def finished_transfers(callback: types.CallbackQuery):
    conn = sqlite3.connect('./database.db')
    cursor = conn.cursor()
    has_transfer = cursor.execute(f"SELECT * FROM transfers WHERE user_id_1='{callback.from_user.id}' AND status='finished'").fetchone()

    if has_transfer:
        text = "üÜó –ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –æ–±–º–µ–Ω—ã."
        all_transfers = cursor.execute(f"SELECT user_id_2, card_id_1, card_id_2 FROM transfers WHERE user_id_1='{callback.from_user.id}' AND status='finished'").fetchall()
        data_1 = [cursor.execute(f"SELECT player, rank FROM cards WHERE id='{i[1]}'").fetchone() for i in all_transfers]
        data_2 = [cursor.execute(f"SELECT player, rank FROM cards WHERE id='{i[2]}'").fetchone() for i in all_transfers]
        for i in range(len(all_transfers)):
            text += f"\n\n{i + 1}. –¢—ã –ø–æ–ª—É—á–∏–ª <b>{data_2[i][0]} | {data_2[i][1]}</b> –æ—Ç –∏–≥—Ä–æ–∫–∞ —Å ID <b><code>{all_transfers[i][0]}</code></b> –≤ –æ–±–º–µ–Ω –Ω–∞ <b>{data_1[i][0]} | {data_1[i][1]}</b>"

        await callback.message.answer(text)
        cursor.close()

    else:
        await callback.message.answer(f"üóø –¢—ã –µ—â–µ –Ω–µ —Å–æ–≤–µ—Ä—à–∏–ª –Ω–∏ –æ–¥–Ω–æ–≥–æ –æ–±–º–µ–Ω–∞.")

async def donate(callback: types.CallbackQuery):
    await callback.message.answer('üåê –í—ã–±–µ—Ä–∏ –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–Ω—É—Ç—Ä–∏–∏–≥—Ä–æ–≤–æ–π –≤–∞–ª—é—Ç—ã:')

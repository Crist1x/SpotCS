from aiogram import types
import sqlite3

from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.context import FSMContext
from pyexpat.errors import messages

from config import CHANNEL_ID, menu_text
from data import utils
from data.forms import Quiz, GetAnswer, Search, Team
from data.utils import draw_card, sort_by_rank
from dispatcher import bot
import datetime

import time

from handlers.admin_actions import add_card
from keyboards.admin import cansel_kb, admin_menu_kb
from keyboards.general import channel_ikb, main_menu_kb, ranks_ikb

# –í—Ö–æ–¥ –≤ –∏–≥—Ä—É
async def in_game(callback: types.CallbackQuery):
    user_channel_status = await bot.get_chat_member(chat_id=CHANNEL_ID, user_id=callback.from_user.id)

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–ø–∏—Å–∞–Ω
    if user_channel_status.status != 'left':
        conn = sqlite3.connect('database.db')
        cursor = conn.cursor()
        is_exist = cursor.execute(f"SELECT id FROM users WHERE id={callback.from_user.id}").fetchone()
        if not is_exist:
            cursor.execute(f"INSERT INTO users (id, card_time, random_time, luckyshot_time, clutch_time, quiz_done, season_score, "
                           f"full_score, chances, status) VALUES ('{callback.from_user.id}', '', '', '', '', '', '', '', 6, 'active');")
        conn.commit()
        cursor.close()
        await callback.message.delete()
        await callback.message.answer(menu_text, reply_markup=main_menu_kb)

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–æ–ª—å—à–µ –Ω–µ –≤ –∫–∞–Ω–∞–ª–µ
    else:
        await callback.message.delete()
        await callback.message.answer('<b>–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∏–≥—Ä—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª</b>‚úÖ', reply_markup=channel_ikb, parse_mode="HTML")

# –ò–≥—Ä–∞ –≤ –∫—É–±–∏–∫
async def random(callback: types.CallbackQuery):
    conn = sqlite3.connect('database.db')
    cursor = conn.cursor()
    click_date = cursor.execute(f"SELECT random_time FROM users WHERE id='{callback.from_user.id}'").fetchone()[0]
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –Ω–∞–∂–∞—Ç–∏—è
    if click_date != '':
        t = (list(map(int, click_date.split()[0].split("-"))), list(map(int, click_date.split()[1].split("."))))
        click_date = datetime.datetime(t[0][0], t[0][1], t[0][2], t[1][0], t[1][1], t[1][2])
    today = datetime.datetime.today()

    # –ï—Å–ª–∏ –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è –±–æ–ª—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ
    if click_date == '' or today - datetime.timedelta(5) > click_date:
        cursor.execute(f"UPDATE users SET random_time = '{today.strftime('%Y-%m-%d %H.%M.%S')}' WHERE id='{callback.from_user.id}'")
        conn.commit()
        data = await bot.send_dice(callback.message.chat.id, emoji='üé≤')
        time.sleep(4)
        form = "–ø–æ–ø—ã—Ç–∫–∏"
        match data.dice.value:
            case 1:
                form = "–ø–æ–ø—ã—Ç–∫—É"
            case 5:
                form = "–ø–æ–ø—ã—Ç–æ–∫"

        await callback.message.answer(f"–í—ã –ø–æ–ª—á–∞–µ—Ç–µ {data.dice.value} {form}")

        chances = cursor.execute(f"SELECT chances FROM users WHERE id='{callback.from_user.id}'").fetchone()[0]
        cursor.execute(f"UPDATE users SET chances='{chances + data.dice.value}' WHERE id={callback.from_user.id}")
        conn.commit()
        cursor.close()
    else:
        remains = str(datetime.timedelta(5) - (today - click_date)).split(", ")
        days, timee = remains[0].split()[0], remains[1].split(":")
        await callback.message.answer(f"–î–æ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–∏ –æ—Å—Ç–∞–ª–æ—Å—å {days} –¥–Ω. {timee[0]} —á. {timee[1]} –º–∏–Ω.")
        cursor.close()

# –ó–∞–±—Ä–æ—Å –≤ –∫–æ–ª—å—Ü–æ
async def lucky_shot(callback: types.CallbackQuery):
    conn = sqlite3.connect('database.db')
    cursor = conn.cursor()
    click_date = cursor.execute(f"SELECT luckyshot_time FROM users WHERE id='{callback.from_user.id}'").fetchone()[0]

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –Ω–∞–∂–∞—Ç–∏—è
    if click_date != '':
        t = (list(map(int, click_date.split()[0].split("-"))), list(map(int, click_date.split()[1].split("."))))
        click_date = datetime.datetime(t[0][0], t[0][1], t[0][2], t[1][0], t[1][1], t[1][2])
    today = datetime.datetime.today()

    # –ï—Å–ª–∏ –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è –±–æ–ª—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ
    if click_date == '' or today - datetime.timedelta(1) > click_date:
        cursor.execute(f"UPDATE users SET luckyshot_time = '{today.strftime('%Y-%m-%d %H.%M.%S')}' WHERE id='{callback.from_user.id}'")
        conn.commit()
        data = await bot.send_dice(callback.message.chat.id, emoji='üèÄ')
        time.sleep(4.5)
        if data.dice.value < 4:
            await callback.message.answer(f'–í—ã –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç–µ –ø–æ–ø—ã—Ç–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≤—Ç—Ä–∞')
        else:
            await callback.message.answer(f'–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ 1 –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –ø–æ–ø—ã—Ç–∫—É')
            chances = cursor.execute(f"SELECT chances FROM users WHERE id='{callback.from_user.id}'").fetchone()[0]
            cursor.execute(f"UPDATE users SET chances='{chances + 1}' WHERE id={callback.from_user.id}")
            conn.commit()
            cursor.close()
    else:
        remains = str(datetime.timedelta(1) - (today - click_date)).split(":")
        await callback.message.answer(f"–î–æ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–∏ –æ—Å—Ç–∞–ª–æ—Å—å {remains[0]} —á. {remains[1]} –º–∏–Ω.")
        cursor.close()

# –ö–≤–∏–∑
async def quiz(callback: types.CallbackQuery, state: FSMContext):
    conn = sqlite3.connect('database.db')
    cursor = conn.cursor()
    quiz_status = cursor.execute(f"SELECT quiz_done FROM users WHERE id={callback.from_user.id}").fetchone()[0]
    if quiz_status != "done":
        if cursor.execute("select count(*) from quiz").fetchone()[0] != 0:
            question, answers = cursor.execute(f"SELECT question FROM quiz").fetchone()[0], cursor.execute(f"SELECT variant_a, variant_b, variant_c, variant_d FROM quiz").fetchone()
            kb = ReplyKeyboardMarkup(keyboard=[
                                [KeyboardButton(text=f"{answers[0]}"), KeyboardButton(text=f"{answers[1]}")],
                                [KeyboardButton(text=f"{answers[2]}"), KeyboardButton(text=f"{answers[3]}")],
                                [KeyboardButton(text="–í –º–µ–Ω—é")]], resize_keyboard=True)

            await callback.message.answer(f"<b>{question.capitalize()}</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞:", reply_markup=kb, parse_mode="HTML")
            await state.set_state(GetAnswer.ANSWER)
            cursor.close()

        else:
            await callback.message.answer("–°–∫–æ—Ä–æ –º—ã –¥–æ–±–∞–≤–∏–º –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å")
            cursor.close()
    else:
        await callback.message.answer("–í—ã —É–∂–µ –æ—Ç–≤–µ—á–∞–ª–∏ –Ω–∞ –∫–≤–∏–∑. –°–∫–æ—Ä–æ –º—ã –¥–æ–±–∞–≤–∏–º –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å")
        cursor.close()


# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã—Ö–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è –∫–≤–∏–∑–∞
async def confirm_quiz(callback: types.CallbackQuery, state: FSMContext):
    conn = sqlite3.connect('database.db')
    cursor = conn.cursor()
    data = await state.get_data()

    cursor.execute("DELETE FROM quiz")
    cursor.execute("UPDATE users SET quiz_done=NULL")
    conn.commit()
    cursor.execute("INSERT INTO quiz (question, variant_a, variant_b, variant_c, variant_d, correct) VALUES "
                   f"('{data['question']}', '{data['first']}', '{data['second']}', '{data['third']}', '{data['fourth']}', '{int(data['correct'])}')")
    conn.commit()
    cursor.close()
    await state.clear()
    await callback.message.answer("–ö–≤–∏–∑ –æ–±–Ω–æ–≤–ª–µ–Ω!", reply_markup=admin_menu_kb)


# –ù–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã—Ö–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –≤–æ–ø–æ—Å–∞ –¥–ª—è –∫–≤–∏–∑–∞
async def disclaim_quiz(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer("–ü–æ—Ä–æ–±—É–µ–º –∑–∞–Ω–æ–≤–æ. –í–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–º –∫–≤–∏–∑–µ:", reply_markup=cansel_kb)
    await state.set_state(Quiz.QUESTION)


card_index = 0
card_search_index = 0
card_rank_index = 0
card_team_index = 0

async def next_card(callback: types.CallbackQuery):
    #TODO: –ø–æ–º–µ–Ω—è—Ç—å —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—é –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –∫–∞—Ä–¥
    if callback.data.split("_")[-1] == "card":
        global card_index
        conn = sqlite3.connect('database.db')
        cursor = conn.cursor()
        user_card_ids = [i[0] for i in cursor.execute(f"SELECT card_id FROM collections WHERE user_id='{callback.from_user.id}'").fetchall()[::-1]]
        if card_index + 1 < len(user_card_ids):
            card_index += 1
            card_info = cursor.execute(f"SELECT id, player, team, rank, score FROM cards WHERE id='{user_card_ids[card_index]}'").fetchone()
            cursor.close()
            card = utils.Card(card_info)
            await draw_card(typ="base", tek=card_index + 1, all=len(user_card_ids), card=card, callback=callback)
        else:
            await callback.answer("–≠—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è –∫–∞—Ä—Ç–æ—á–∫–∞ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏")
            cursor.close()

    elif callback.data.split("_")[-1] == "search":
        from data.forms import search_cards
        global card_search_index

        if card_search_index + 1 < len(search_cards):
            card_search_index += 1
            card = utils.Card(search_cards[card_search_index])
            await draw_card(typ="search", tek=card_search_index + 1, all=len(search_cards), card=card, callback=callback)
        else:
            await callback.answer("–≠—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è –∫–∞—Ä—Ç–æ—á–∫–∞")

    elif callback.data.split("_")[-1] == "rank":
        from data.utils import search_cards
        global card_rank_index
        if card_rank_index + 1 < len(search_cards):
            card_rank_index += 1
            card = utils.Card(search_cards[card_rank_index])
            await draw_card(typ="rank", tek=card_rank_index + 1, all=len(search_cards), card=card,
                            callback=callback)
        else:
            await callback.answer("–≠—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è –∫–∞—Ä—Ç–æ—á–∫–∞")

    elif callback.data.split("_")[-1] == "team":
        from data.forms import team_cards
        global card_team_index
        if card_team_index + 1 < len(team_cards):
            card_team_index += 1
            card = utils.Card(team_cards[card_team_index])
            await draw_card(typ="team", tek=card_team_index + 1, all=len(team_cards), card=card,
                            callback=callback)
        else:
            await callback.answer("–≠—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è –∫–∞—Ä—Ç–æ—á–∫–∞")


async def prev_card(callback: types.CallbackQuery):
    if callback.data.split("_")[-1] == "card":
        global card_index
        conn = sqlite3.connect('database.db')
        cursor = conn.cursor()

        user_card_ids = [i[0] for i in cursor.execute(
            f"SELECT card_id FROM collections WHERE user_id='{callback.from_user.id}'").fetchall()[::-1]]
        if card_index - 1 >= 0:
            card_index -= 1
            card_info = cursor.execute(
                f"SELECT id, player, team, rank, score FROM cards WHERE id='{user_card_ids[card_index]}'").fetchone()
            card = utils.Card(card_info)
            cursor.close()
            await draw_card(typ="base", tek=card_index + 1, all=len(user_card_ids), card=card, callback=callback)
        else:
            cursor.close()
            await callback.answer("–≠—Ç–æ –ø–µ—Ä–≤–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏")

    elif callback.data.split("_")[-1] == "search":
        from data.forms import search_cards
        global card_search_index

        if card_search_index - 1 >= 0:
            card_search_index -= 1
            card = utils.Card(search_cards[card_search_index])
            await draw_card(typ="search", tek=card_search_index + 1, all=len(search_cards), card=card, callback=callback)
        else:
            await callback.answer("–≠—Ç–æ –ø–µ—Ä–≤–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞")

    elif callback.data.split("_")[-1] == "rank":
        from data.utils import search_cards
        global card_rank_index

        if card_rank_index - 1 >= 0:
            card_rank_index -= 1
            card = utils.Card(search_cards[card_rank_index])
            await draw_card(typ="rank", tek=card_rank_index + 1, all=len(search_cards), card=card,
                            callback=callback)
        else:
            await callback.answer("–≠—Ç–æ –ø–µ—Ä–≤–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞")

    elif callback.data.split("_")[-1] == "team":
        from data.forms import team_cards
        global card_team_index
        if card_team_index - 1 >= 0:
            card_team_index -= 1
            card = utils.Card(team_cards[card_team_index])
            await draw_card(typ="team", tek=card_team_index + 1, all=len(team_cards), card=card,
                            callback=callback)
        else:
            await callback.answer("–≠—Ç–æ –ø–µ—Ä–≤–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞")


async def first_card(callback: types.CallbackQuery):
    if callback.data.split("_")[-1] == "card":
        global card_index
        conn = sqlite3.connect('database.db')
        cursor = conn.cursor()

        if card_index != 0:
            card_index = 0
            user_card_id = cursor.execute(f"SELECT card_id FROM collections WHERE user_id='{callback.from_user.id}'").fetchall()[::-1][0][0]
            length = cursor.execute(f"SELECT COUNT(card_id) FROM collections WHERE user_id='{callback.from_user.id}'").fetchone()[0]
            card_info = cursor.execute(f"SELECT id, player, team, rank, score FROM cards WHERE id='{user_card_id}'").fetchone()
            cursor.close()
            card = utils.Card(card_info)
            await draw_card(typ="base", tek=1, all=length, card=card, callback=callback)
        else:
            cursor.close()
            await callback.answer("–≠—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è –∫–∞—Ä—Ç–∞, –¥–æ–±–∞–≤–ª–µ–Ω–Ω–∞—è –≤ –≤–∞—à—É –∫–æ–ª–ª–µ–∫—Ü–∏—é")

    elif callback.data.split("_")[-1] == "search":
        from data.forms import search_cards
        global card_search_index

        if card_search_index != 0:
            card_search_index = 0
            card = utils.Card(search_cards[card_search_index])
            await draw_card(typ="search", tek=card_search_index + 1, all=len(search_cards), card=card, callback=callback)
        else:
            await callback.answer("–≠—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è –∫–∞—Ä—Ç–∞, –¥–æ–±–∞–≤–ª–µ–Ω–Ω–∞—è –≤ –≤–∞—à—É –∫–æ–ª–ª–µ–∫—Ü–∏—é")

    elif callback.data.split("_")[-1] == "rank":
        from data.utils import search_cards
        global card_rank_index

        if card_rank_index != 0:
            card_rank_index = 0
            card = utils.Card(search_cards[card_rank_index])
            await draw_card(typ="rank", tek=card_rank_index + 1, all=len(search_cards), card=card,
                            callback=callback)
        else:
            await callback.answer("–≠—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è –∫–∞—Ä—Ç–∞, –¥–æ–±–∞–≤–ª–µ–Ω–Ω–∞—è –≤ –≤–∞—à—É –∫–æ–ª–ª–µ–∫—Ü–∏—é")

    elif callback.data.split("_")[-1] == "team":
        from data.forms import team_cards
        global card_team_index
        if card_team_index != 0:
            card_team_index = 0
            card = utils.Card(team_cards[card_team_index])
            await draw_card(typ="team", tek=card_team_index + 1, all=len(team_cards), card=card,
                            callback=callback)
        else:
            await callback.answer("–≠—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è –∫–∞—Ä—Ç–∞, –¥–æ–±–∞–≤–ª–µ–Ω–Ω–∞—è –≤ –≤–∞—à—É –∫–æ–ª–ª–µ–∫—Ü–∏—é")

async def last_card(callback: types.CallbackQuery):
    if callback.data.split("_")[-1] == "card":
        global card_index
        conn = sqlite3.connect('database.db')
        cursor = conn.cursor()

        user_card_id = cursor.execute(
            f"SELECT card_id FROM collections WHERE user_id='{callback.from_user.id}'").fetchall()[::-1]
        if card_index != len(user_card_id) - 1:
            card_index = len(user_card_id) - 1
            length = cursor.execute(f"SELECT COUNT(card_id) FROM collections WHERE user_id='{callback.from_user.id}'").fetchone()[0]
            card_info = cursor.execute(f"SELECT id, player, team, rank, score FROM cards WHERE id='{user_card_id[card_index][0]}'").fetchone()
            cursor.close()
            card = utils.Card(card_info)
            await draw_card(typ="base", tek=card_index+1, all=length, card=card, callback=callback)
        else:
            cursor.close()
            await callback.answer("–≠—Ç–æ –ø–µ—Ä–≤–∞—è –∫–∞—Ä—Ç–∞, –¥–æ–±–∞–≤–ª–µ–Ω–Ω–∞—è –≤ –≤–∞—à—É –∫–æ–ª–ª–µ–∫—Ü–∏—é")

    elif callback.data.split("_")[-1] == "search":
        from data.forms import search_cards
        global card_search_index
        if (card_search_index != len(search_cards) - 1) and len(search_cards) != 1:
            card_search_index = len(search_cards) - 1
            card = utils.Card(search_cards[card_search_index])
            await draw_card(typ="search", tek=card_search_index + 1, all=len(search_cards), card=card, callback=callback)
        else:
            await callback.answer("–≠—Ç–æ –ø–µ—Ä–≤–∞—è –∫–∞—Ä—Ç–∞, –¥–æ–±–∞–≤–ª–µ–Ω–Ω–∞—è –≤ –≤–∞—à—É –∫–æ–ª–ª–µ–∫—Ü–∏—é")

    elif callback.data.split("_")[-1] == "rank":
        from data.utils import search_cards
        global card_rank_index

        if (card_rank_index != len(search_cards) - 1) and len(search_cards) != 1:
            card_rank_index = len(search_cards) - 1
            card = utils.Card(search_cards[card_rank_index])
            await draw_card(typ="rank", tek=card_rank_index + 1, all=len(search_cards), card=card,
                            callback=callback)
        else:
            await callback.answer("–≠—Ç–æ –ø–µ—Ä–≤–∞—è –∫–∞—Ä—Ç–∞, –¥–æ–±–∞–≤–ª–µ–Ω–Ω–∞—è –≤ –≤–∞—à—É –∫–æ–ª–ª–µ–∫—Ü–∏—é")

    elif callback.data.split("_")[-1] == "team":
        from data.forms import team_cards
        global card_team_index
        if (card_team_index != len(team_cards) - 1) and len(team_cards) != 1:
            card_team_index = len(team_cards) - 1
            card = utils.Card(team_cards[card_team_index])
            print(card_team_index + 1)
            await draw_card(typ="team", tek=card_team_index + 1, all=len(team_cards), card=card,
                            callback=callback)
        else:
            await callback.answer("–≠—Ç–æ –ø–µ—Ä–≤–∞—è –∫–∞—Ä—Ç–∞, –¥–æ–±–∞–≤–ª–µ–Ω–Ω–∞—è –≤ –≤–∞—à—É –∫–æ–ª–ª–µ–∫—Ü–∏—é")


async def to_collection(callback: types.CallbackQuery):
    global card_index
    card_index = 0

    await callback.message.delete()

    conn = sqlite3.connect('database.db')
    cursor = conn.cursor()
    user_card_id = cursor.execute(f"SELECT card_id FROM collections WHERE user_id='{callback.from_user.id}'").fetchall()[::-1][0][0]
    length = cursor.execute(f"SELECT COUNT(card_id) FROM collections WHERE user_id='{callback.from_user.id}'").fetchone()[0]
    card_info = cursor.execute(f"SELECT id, player, team, rank, score FROM cards WHERE id='{user_card_id}'").fetchone()
    cursor.close()
    card = utils.Card(card_info)
    await draw_card(typ="base", tek=1, all=length, card=card, callback=callback)

async def search(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer("üìù –í–≤–µ–¥–∏ –Ω–∏–∫–Ω–µ–π–º –∏–≥—Ä–æ–∫–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ç—ã —Ö–æ—á–µ—à—å –Ω–∞–π—Ç–∏ –≤ —Å–≤–æ–µ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏:")
    await state.set_state(Search.NICKNAME)


async def by_rank(callback: types.CallbackQuery):
    await callback.message.answer(
        "‚öúÔ∏è –ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—Ç—ã –∏–∑ —Å–≤–æ–µ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –ø–æ –∑–≤–∞–Ω–∏—é. –í—ã–±–µ—Ä–∏ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–µ –∑–≤–∞–Ω–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ:",
        reply_markup=ranks_ikb)

async def sort_rank(callback: types.CallbackQuery):
    total = ""
    await callback.message.delete()
    match callback.data:
        case "rank_silver":
            total = "–°–∏–ª—å–≤–µ—Ä"
        case "rank_gold_nova":
            total = "–ó–≤–µ–∑–¥–∞"
        case "rank_ak":
            total = "–ö–∞–ª–∞—à"
        case "rank_ak_wreaths":
            total = "–ö–∞–ª–∞—à —Å –≤–µ–Ω–∫–∞–º–∏"
        case "rank_two_ak":
            total = "–î–≤–∞ –∫–∞–ª–∞—à–∞"
        case "rank_big_star":
            total = "–ë–∏–≥ —Å—Ç–∞—Ä"
        case "rank_berkut":
            total = "–ë–µ—Ä–∫—É—Ç"
        case "rank_lem":
            total = "–õ–µ–º"
        case "rank_suprim":
            total = "–°—É–ø—Ä–∏–º"
        case "rank_global":
            total = "–ì–ª–æ–±–∞–ª"

    await sort_by_rank(total, callback)


async def by_team(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer(
        "üë• –ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—Ç—ã –∏–∑ —Å–≤–æ–µ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –ø–æ –∫–æ–º–∞–Ω–¥–µ. –í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –Ω–∏–∂–µ:")
    await state.set_state(Team.TEAM)

async def create_transfer(callback: types.CallbackQuery):
    global card_index
    await callback.message.answer("‚ôªÔ∏è –ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –æ–±–º–µ–Ω—è—Ç—å—Å—è –∫–∞—Ä—Ç–∞–º–∏ —Å –¥—Ä—É–≥–∏–º–∏ –∏–≥—Ä–æ–∫–∞–º–∏! "
                                  "–í—ã–±–µ—Ä–∏ –∫–∞—Ä—Ç—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—á–µ—à—å –æ–±–º–µ–Ω—è—Ç—å. –î–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –º–æ–∂–µ—à—å "
                                  "–æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å —Å–≤–æ–∏ –∫–∞—Ä—Ç—ã –ø–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–º—É –∫—Ä–∏—Ç–µ—Ä–∏—é.")
    card_index = 0

    conn = sqlite3.connect('database.db')
    cursor = conn.cursor()
    user_card_id = \
    cursor.execute(f"SELECT card_id FROM collections WHERE user_id='{callback.from_user.id}'").fetchall()[::-1][0][0]
    length = \
    cursor.execute(f"SELECT COUNT(card_id) FROM collections WHERE user_id='{callback.from_user.id}'").fetchone()[0]
    card_info = cursor.execute(f"SELECT id, player, team, rank, score FROM cards WHERE id='{user_card_id}'").fetchone()
    cursor.close()
    if len(card_info) == 5:
        card = utils.Card(card_info)
        await draw_card(typ="transfer", tek=1, all=length, card=card, callback=callback)
    else:
        await callback.message.answer("–ö–∞–∂–µ—Ç—Å—è, –≤ —Ç–≤–æ–µ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –Ω–µ—Ç –∫–∞—Ä—Ç ‚ùå")